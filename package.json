{
  "name": "codescan-vscode",
  "displayName": "CodeScan",
  "description": "On-the-fly bug and quality issues detection for Apex and VisualForce",
  "version": "1.6.9",
  "icon": "images/codescan_128px.png",
  "publisher": "codescansf",
  "homepage": "https://codescan.io",
  "repository": {
    "type": "git",
    "url": "https://github.com/VillageChief/sonarlint-vscode.git"
  },
  "bugs": {
    "url": "https://codescan.io/",
    "email": "support@codescan.io"
  },
  "license": "SEE LICENSE IN LICENSE.txt",
  "engines": {
    "vscode": "^1.52.0"
  },
  "categories": [
    "Linters"
  ],
  "keywords": [
    "code analysis",
    "linters"
  ],
  "qna": "knowledgebase.autorabit.com/codescan/docs",
  "activationEvents": [
    "onStartupFinished"
  ],
  "extensionDependencies": [
    "vscode.typescript-language-features"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "CodeScan",
      "properties": {
        "codescan.output.showAnalyzerLogs": {
          "type": "boolean",
          "default": false,
          "description": "Show analyzer's logs in the CodeScan output.",
          "scope": "window"
        },
        "codescan.output.showVerboseLogs": {
          "type": "boolean",
          "default": false,
          "description": "Enable verbose log level (for both CodeScan and analyzer) in the CodeScan output.",
          "scope": "window"
        },
        "codescan.trace.server": {
          "default": "off",
          "description": "Traces the communication between VS Code and the CodeScan language server.",
          "scope": "window",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "off",
                "messages",
                "verbose"
              ],
              "default": "off"
            },
            {
              "type": "object",
              "properties": {
                "verbosity": {
                  "type": "string",
                  "enum": [
                    "off",
                    "messages",
                    "verbose"
                  ],
                  "default": "off"
                },
                "format": {
                  "type": "string",
                  "enum": [
                    "text",
                    "json"
                  ],
                  "default": "text"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "codescan.testFilePattern": {
          "type": "string",
          "default": "",
          "markdownDescription": "Files whose name match this [glob pattern](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob) are considered as test files by analyzers. Most rules are *not* evaluated on test files. Example: `{**/test/**,**/*test*,**/*Test*}`",
          "scope": "resource"
        },
        "codescan.analyzerProperties": {
          "type": "object",
          "patternProperties": {
            "^.*$": {
              "type": "string",
              "markdownDescription": "One entry value"
            },
            "additionalProperties": false
          },
          "markdownDescription": "Extra properties that could be passed to the code analyzers. e.g. `{\"sonar.javascript.globals\": \"xxx\"}`. See [documentation](https://redirect.sonarsource.com/doc/plugin-library.html) of each analyzers.",
          "scope": "resource"
        },
        "codescan.disableTelemetry": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Disable sending anonymous usage statistics.",
          "scope": "window"
        },
        "codescan.rules": {
          "type": "object",
          "scope": "application",
          "default": {},
          "markdownDescription": "Customize applied rule set. This property contains a list of rules whose activation level or parameter values differ from the one provided by default. See _CodeScan Rules_ view for the full list of available rules. In connected mode, this configuration is overridden by the projects's quality profile, as configured on server side.\n\nExample:\n\n    \"codescan.rules\": {\n        \"javascript:1481\": {\n            \"level\": \"off\",\n        \"javascript:S103\": {\n            \"level\": \"on\",\n            \"parameters\": {\n                \"maximumLineLength\": \"120\"\n            }\n        }\n    }\n",
          "patternProperties": {
            "^[^:]+:[^:]+$": {
              "type": "object",
              "markdownDescription": "Property names are rule keys in the form: `repo:key`",
              "properties": {
                "level": {
                  "type": "string",
                  "anyOf": [
                    "off",
                    "on"
                  ],
                  "markdownDescription": "When set to `off`, disable the rule. When set to `on`, enable the rule."
                },
                "parameters": {
                  "type": "object",
                  "markdownDescription": "Rule parameters. See rule description for accepted parameters. E.g `{ \"intParam\": \"123\" }`."
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "codescan.ls.javaHome": {
          "type": "string",
          "markdownDescription": "Path to a Java Runtime Environment (11 or more recent) used to launch the CodeScan Language Server. \n* On Windows, backslashes must be escaped, e.g. `C:\\\\Program Files\\\\Java\\\\jdk-11.0.12+7` \n* On macOS, this path should include the `/Contents/Home` directory, e.g `/Library/Java/JavaVirtualMachines/jdk-11.0.12+7.jdk/Contents/Home`",
          "scope": "machine"
        },
        "codescan.ls.vmargs": {
          "type": "string",
          "markdownDescription": "Extra JVM arguments used to launch the CodeScan Language Server. e.g. `-Xmx1024m`",
          "scope": "machine"
        },
        "codescan.pathToNodeExecutable": {
          "type": "string",
          "markdownDescription": "Path to a Node.js executable (8 or more recent) used to analyze JavaScript and TypeScript code. \nOn Windows, backslashes must be escaped, e.g. `C:\\\\Program Files\\\\NodeJS\\\\12-lts\\\\bin\\\\node.exe`",
          "scope": "machine"
        },
        "codescan.servers": {
          "type": "array",
          "scope": "application",
          "default": [],
          "markdownDescription": "Configure one or more connection(s) to SonarQube/CodescanCloud. For security reasons, the token should not be stored in SCM with workspace settings. The `serverId` can be any identifier and will be referenced in `#codescan.project#`.\n\nExample for CodescanCloud:\n\n    \"codescan.servers\": [\n      {\n        \"serverId\": \"my_orga_in_CodescanCloud.io\",\n        \"serverUrl\": \"https://app.codescan.io\",\n        \"organizationKey\": \"my_organization\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]\n\nExample for SonarQube:\n\n    \"codescan.servers\": [\n      {\n        \"serverId\": \"my_sonarqube\",\n        \"serverUrl\": \"https://sonar.mycompany.com\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]",
          "items": {
            "properties": {
              "serverId": {
                "type": "string",
                "description": "A unique identifier for this server connection. Will be referenced from `#codescan.project#`"
              },
              "serverUrl": {
                "type": "string",
                "description": "URL of the server. Use https://app.codescan.io for CodescanCloud."
              },
              "token": {
                "type": "string",
                "description": "Token generated from My Account>Security in SonarQube/CodescanCloud"
              },
              "organizationKey": {
                "type": "string",
                "description": "Only used for CodescanCloud"
              }
            },
            "additionalProperties": false,
            "required": [
              "serverId",
              "serverUrl"
            ]
          }
        },
        "codescan.project": {
          "markdownDescription": "Specify to which SonarQube/CodeScanCloud project the current project is bound. Connected mode allows to use the same code analyzers, rules and configuration that are defined in the server.\n\nExample:\n\n    \"codescan.project\": {\n      \"serverId\": \"my_orga_in_app.codescan.io\",\n      \"projectKey\": \"my_project\"\n    }",
          "default": {},
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "serverId": {
                  "type": "string",
                  "description": "Identifier of the server connection declared in `#codescan.server`"
                },
                "projectKey": {
                  "type": "string",
                  "description": "Key of the project in SonarQube/CodescanCloud"
                }
              },
              "additionalProperties": false,
              "required": [
                "serverId",
                "serverUrl"
              ]
            },
            {
              "type": "object",
              "properties": {
                "serverId": {
                  "type": "string",
                  "description": "Identifier of the server connection declared in `#codescan.server`"
                },
                "projectKey": {
                  "type": "string",
                  "description": "Key of the project in SonarQube/CodescanCloud (can be found on project homepage)"
                }
              },
              "additionalProperties": false,
              "required": [
                "projectKey"
              ]
            }
          ],
          "scope": "resource"
        }
      }
    },
    "commands": [
      {
        "command": "CodeScan.UpdateAllBindings",
        "title": "Update all project bindings to SonarQube/CodescanCloud",
        "category": "CodeScan"
      },
      {
        "command": "CodeScan.ShowCodeScanOutput",
        "title": "Show CodeScan Output",
        "category": "CodeScan"
      },
      {
        "command": "CodeScan.DeactivateRule",
        "title": "Deactivate",
        "icon": {
          "light": "images/activation/light/cross.svg",
          "dark": "images/activation/dark/cross.svg"
        }
      },
      {
        "command": "CodeScan.ActivateRule",
        "title": "Activate",
        "icon": {
          "light": "images/activation/light/check.svg",
          "dark": "images/activation/dark/check.svg"
        }
      },
      {
        "command": "CodeScan.ResetDefaultRule",
        "title": "Reset",
        "enablement": "view == CodeScan.AllRules"
      },
      {
        "command": "CodeScan.ShowAllRules",
        "title": "All",
        "enablement": "view == CodeScan.AllRules"
      },
      {
        "command": "CodeScan.ShowActiveRules",
        "title": "Active",
        "enablement": "view == CodeScan.AllRules"
      },
      {
        "command": "CodeScan.ShowInactiveRules",
        "title": "Inactive",
        "enablement": "view == CodeScan.AllRules"
      },
      {
        "command": "CodeScan.FindRuleByKey",
        "title": "Find Rule By Key",
        "enablement": "view == CodeScan.AllRules"
      },
      {
        "command": "CodeScan.ClearLocations",
        "title": "Clear",
        "enablement": "view == CodeScan.IssueLocations"
      }
    ],
    "views": {
      "explorer": [
        {
          "id": "CodeScan.AllRules",
          "name": "CodeScan Rules"
        },
        {
          "id": "CodeScan.IssueLocations",
          "name": "CodeScan Issue Locations"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "CodeScan.IssueLocations",
        "contents": "No locations to show.\nUse \"Show all locations\" code action from a CodeScan issue."
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "CodeScan.ShowAllRules",
          "when": "view == CodeScan.AllRules",
          "group": "navigation"
        },
        {
          "command": "CodeScan.ShowActiveRules",
          "when": "view == CodeScan.AllRules",
          "group": "navigation"
        },
        {
          "command": "CodeScan.ShowInactiveRules",
          "when": "view == CodeScan.AllRules",
          "group": "navigation"
        },
        {
          "command": "CodeScan.FindRuleByKey",
          "when": "view == CodeScan.AllRules"
        },
        {
          "command": "CodeScan.ClearLocations",
          "when": "view == CodeScan.IssueLocations",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "CodeScan.DeactivateRule",
          "when": "view == CodeScan.AllRules && viewItem == rule-on",
          "group": "inline"
        },
        {
          "command": "CodeScan.ActivateRule",
          "when": "view == CodeScan.AllRules && viewItem == rule-off",
          "group": "inline"
        }
      ]
    },
    "colors": [
      {
        "id": "codescan.locations.background",
        "description": "Background color for highlighted secondary locations of CodeScan issues",
        "defaults": {
          "light": "#f2dede",
          "dark": "#523e3e",
          "highContrast": "#523e3e"
        }
      },
      {
        "id": "codescan.locations.indexText",
        "description": "Text color for secondary location index of CodeScan issues",
        "defaults": {
          "light": "#fff",
          "dark": "#ccc",
          "highContrast": "#ccc"
        }
      },
      {
        "id": "codescan.locations.indexBackground",
        "description": "Background color for secondary location index of CodeScan issues",
        "defaults": {
          "light": "#d18582",
          "dark": "#74232f",
          "highContrast": "#74232f"
        }
      },
      {
        "id": "codescan.locations.indexSelectedText",
        "description": "Text color for active secondary location index of CodeScan issues",
        "defaults": {
          "light": "#fff",
          "dark": "#fff",
          "highContrast": "#fff"
        }
      },
      {
        "id": "codescan.locations.indexSelectedBackground",
        "description": "Background color for active secondary location index of CodeScan issues",
        "defaults": {
          "light": "#a4030f",
          "dark": "#b4131f",
          "highContrast": "#b4131f"
        }
      }
    ]
  },
  "main": "./dist/extension",
  "files": [
    "server/sonarlint-ls.jar",
    "analyzers"
  ],
  "scripts": {
    "vscode:prepublish": "node scripts/prepare.js && webpack --mode production",
    "compile": "tsc -p ./",
    "webpack": "webpack --mode development",
    "pretest": "webpack --mode development && tsc -p ./",
    "test": "node out/test/runTest.js",
    "test-cov": "node out/test/runTest.js --coverage",
    "prepare": "node scripts/prepare.js"
  },
  "dependencies": {
    "expand-home-dir": "0.0.3",
    "find-java-home": "1.1.0",
    "follow-redirects": "1.13.0",
    "inly": "4.0.8",
    "luxon": "1.26.0",
    "open": "7.3.0",
    "path-exists": "4.0.0",
    "compare-versions": "3.6.0",
    "vscode-languageclient": "7.0.0"
  },
  "devDependencies": {
    "@types/chai": "^4.2.10",
    "@types/follow-redirects": "1.8.0",
    "@types/glob": "5.0.30",
    "@types/luxon": "1.26.2",
    "@types/mocha": "9.0.0",
    "@types/node": "^10.17.17",
    "@types/vscode": "^1.41.0",
    "chai": "^4.2.0",
    "crypto": "^0.0.3",
    "dateformat": "^2.0.0",
    "del": "^2.2.2",
    "expect.js": "^0.3.1",
    "fancy-log": "1.3.3",
    "glob": "^7.1.6",
    "gulp": "4.0.2",
    "gulp-artifactory-upload": "^1.4.0",
    "gulp-bump": "3.2.0",
    "gulp-cli": "2.3.0",
    "gulp-rename": "^1.4.0",
    "istanbul-lib-coverage": "^2.0.5",
    "istanbul-lib-instrument": "^3.3.0",
    "istanbul-lib-report": "^2.0.8",
    "istanbul-lib-source-maps": "^3.0.6",
    "istanbul-reports": "^2.2.7",
    "mocha": "9.1.3",
    "mocha-multi-reporters": "^1.1.7",
    "prettier": "2.0.5",
    "sonarqube-scanner": "^2.5.0",
    "through2": "^2.0.5",
    "ts-loader": "6.0.4",
    "typescript": "^3.8.3",
    "vsce": "^1.100.2",
    "vscode-test": "^1.3.0",
    "webpack": "5.60.0",
    "webpack-cli": "4.9.1"
  },
  "prettier": {
    "jsxBracketSameLine": true,
    "printWidth": 120,
    "singleQuote": true,
    "tabWidth": 2,
    "useTabs": false,
    "arrowParens": "avoid",
    "trailingComma": "none",
    "bracketSpacing": true
  }
}
